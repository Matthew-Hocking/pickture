// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  clerkId    String      @unique
  region     String      @default("US")
  movieLists MediaList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MediaList {
  id        Int      @id @default(autoincrement())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies    Movie[]
  tvShows   TvShow[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id          Int                  @id @default(autoincrement())
  title       String
  tmdbId      String               @unique
  genres      Genre[]              @relation("MovieGenres")
  imdbId      String
  overview    String?
  posterPath  String?
  releaseDate DateTime
  runtime     Int
  status      String
  tagline     String?
  voteAverage Float
  voteCount   Int
  cast        MovieCastMember[]
  directors   MovieCrewMember[]
  providers   MovieWatchProvider[]

  mediaListId Int
  mediaList   MediaList @relation(fields: [mediaListId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastSyncedAt DateTime?
}

model TvShow {
  id        Int                   @id @default(autoincrement())
  name      String
  tmdbId    String                @unique
  genres    Genre[]               @relation("TvShowGenres")
  cast      TvShowCastMember[]
  directors TvShowCrewMember[]
  providers TvShowWatchProvider[]

  mediaListId Int
  mediaList   MediaList @relation(fields: [mediaListId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastSyncedAt DateTime?
}

model Genre {
  id   Int    @id
  name String

  movies  Movie[]  @relation("MovieGenres")
  tvShows TvShow[] @relation("TvShowGenres")
}

model MovieCastMember {
  movieId     Int
  name        String
  character   String
  profilePath String?

  movie Movie @relation(fields: [movieId], references: [id])

  @@id([movieId, name])
}

model TvShowCastMember {
  tvShowId    Int
  name        String
  character   String
  profilePath String?

  tvShow TvShow @relation(fields: [tvShowId], references: [id])

  @@id([tvShowId, name])
}

model MovieCrewMember {
  creditId    String  @id
  job         String
  name        String
  profilePath String?

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model TvShowCrewMember {
  creditId    String  @id
  job         String
  name        String
  profilePath String?

  tvShowId Int
  tvShow   TvShow @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
}

model WatchProvider {
  id       Int    @id
  name     String
  logoPath String

  movieLinks  MovieWatchProvider[]
  tvShowLinks TvShowWatchProvider[]
}

model MovieWatchProvider {
  id         Int         @id @default(autoincrement())
  movieId    Int
  providerId Int
  link       String
  offers     OfferType[]

  movie    Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade)
  provider WatchProvider @relation(fields: [providerId], references: [id])
}

model TvShowWatchProvider {
  id         Int         @id @default(autoincrement())
  tvShowId   Int
  providerId Int
  link       String
  offers     OfferType[]

  tvShow   TvShow        @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  provider WatchProvider @relation(fields: [providerId], references: [id])
}

enum OfferType {
  Stream
  Rent
  Buy
}
